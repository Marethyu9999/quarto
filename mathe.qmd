---
title: "Mathe Klausur zum 28.02.2024"
format:
  html:
    code-fold: true
# jupyter: python3
---

# Für die Mathe Klausur relavente Themen
- Integrale (Definition, Stammfunktion, Flächeninhalt, …)
  - *unwahscheinlich* Ober-/ Untersummen
- [Vektoren](#vektoren) (Grundlagen, 3d-Koordinatensystem, [Beträge](#beträge), [Addition](#addition), Subtraktion, [Multiplikation mit Skalaren](#multiplikation-mit-skalaren))
- Geraden
- [gegenseitige Lage von Geraden](#gegenseitige-lage-von-geraden)
- *vielleicht* Analysis

## Vektoren

### Was ist ein Vektor?
Ein Vektor wie $\vec{t}=\begin{bmatrix}2\\4\\6\end{bmatrix}$ sieht wiefolgt aus:
```{python}
#| label: fig-test_3dvector
#| fig-cap: "Ein Beispiel von einem 3D-Vektor"
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

t = np.array([2, 4, 6])

ax.quiver(0, 0, 0, t[0], t[1], t[2])

ax.set_xlim([0, 10])
ax.set_ylim([0, 10])
ax.set_zlim([0, 10])

ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')

plt.show()
```
oder in 2D:

```{python}
#| label: fig-test_2dvector
#| fig-cap: "Ein Beispiel von einem 2D-Vektor"
import matplotlib.pyplot as plt

vector = (2, 4)

plt.quiver(0, 0, vector[0], vector[1], angles='xy', scale_units='xy', scale=1)
plt.xlim(-1, 3)
plt.ylim(-1, 5)
plt.xlabel('X')
plt.ylabel('Y')
plt.grid()
plt.show()
```

und hat sowohl eine Richtung als auch einen Betrag. <br>Sie können außerdem theoretisch unendlich viele Dimensionen haben.

#### Beträge
Sie haben sowohl eine Richtung als auch einen Betrag, welcher wie folgt errechnet wird:
$$\vec{v} = \sqrt{x^2 + y^2 + z^2}$$
Was in [unserem Fall](#was-ist-ein-vektor) folgendes heißt: $\sqrt{2^2+4^2+6^2}=7,48$

#### Addition
Vektoren zu addieren ist denkbar einfach, wie hier:
$$\begin{bmatrix}4\\-1\\2\end{bmatrix}+\begin{bmatrix}3\\2\\-4\end{bmatrix}=\begin{bmatrix}7\\1\\-2\end{bmatrix}$$
Wie vielleicht zu erkennen ist, werden jediglich die Werte der selbigen Dimensionen addiert, was heißt:
$$\begin{bmatrix}x_1\\y_1\\z_1\end{bmatrix}+\begin{bmatrix}x_2\\y_2\\z_3\end{bmatrix}=\begin{bmatrix}x_3\\y_3\\z_3\end{bmatrix}$$

##### Graphische Addition

```{python}
import matplotlib.pyplot as plt

vector1 = (4, -1)
vector2 = (3, 2)
added_vector = (vector1[0] + vector2[0], vector1[1] + vector2[1])

plt.quiver(0, 0, vector1[0], vector1[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Vector 1')
plt.quiver(0, 0, vector2[0], vector2[1], angles='xy', scale_units='xy', scale=1, color='red', label='Vector 2')
plt.quiver(0, 0, added_vector[0], added_vector[1], angles='xy', scale_units='xy', scale=1, color='green', label='Added Vector')

# Pointing from vec1 to added_vector
plt.quiver(vector1[0], vector1[1], added_vector[0] - vector1[0], added_vector[1] - vector1[1], angles='xy', scale_units='xy', scale=1, color='black', linestyle='dashed')

# Pointing from vec2 to added_vector
plt.quiver(vector2[0], vector2[1], added_vector[0] - vector2[0], added_vector[1] - vector2[1], angles='xy', scale_units='xy', scale=1, color='black', linestyle='dashed')
plt.scatter(0, 0, color='black', label='Origin')
plt.xlim(-1, 8)
plt.ylim(-2, 5)
plt.xlabel('X')
plt.ylabel('Y')
plt.grid()
plt.legend()
plt.show()

```

#### Subtraktion
Subtraktion von Vektoren ist praktisch identisch zur [Addition](#addition)

#### Multiplikation mit Skalaren
Um diese Art der Multiplikation zu verstehen muss der Begriff **Skalar** verstanden werden, der einfach nur heißt:<br>
*Zahl welche mit Vektoren verrechnet wird und kein Vektor ist*

Als Beispiel nehme ich jetzt mal $\vec{a}=\begin{bmatrix}2\\2\end{bmatrix}$ und $\begin{bmatrix}2\\2\end{bmatrix}*2=\begin{bmatrix}4\\4\end{bmatrix}$

Also:
$$\vec{v} = \begin{bmatrix} x_1\\y_1 \end{bmatrix}$$ 
$$\begin{bmatrix}x_1\\y_1\end{bmatrix} * t = \begin{bmatrix}x_1*t\\y_1*t\end{bmatrix} = \begin{bmatrix}x_2\\y_2\end{bmatrix}$$

###### Graphische Multiplikation

```{python}
import matplotlib.pyplot as plt

vector = (2, 2)
multiplied_vector = (vector[0] * 2, vector[1] * 2)

plt.quiver(0, 0, vector[0], vector[1], angles='xy', scale_units='xy', scale=1, color='blue', label='Original Vector')
plt.quiver(0, 0, multiplied_vector[0], multiplied_vector[1], angles='xy', scale_units='xy', scale=1, color='red', label='Multiplied Vector')

plt.xlim(-1, 5)
plt.ylim(-1, 5)
plt.xlabel('X')
plt.ylabel('Y')
plt.grid()
plt.legend()
plt.show()

```

###### Beispiele der Multiplikation
1. $(-5) * \begin{bmatrix}-2\\1\\-1\end{bmatrix} = \begin{bmatrix}10\\-5\\5\end{bmatrix}$
2. $7 * \begin{bmatrix}1\\2\\5\end{bmatrix} = \begin{bmatrix}7\\14\\35\end{bmatrix}$
3. $\frac{1}{2} * \begin{bmatrix}4\\6\\8\end{bmatrix} = \begin{bmatrix}2\\3\\4\end{bmatrix}$

### Vektoren und Geraden
Mit Vektoren können Geraden ähnlich wie mit der "*normalen*" Formel $t(x) = mx+n$ berechnet werden. <br>
Nur ist die Formel hier $x = \vec{p} + r * \vec{u}$

- $\vec{p}$: Stützvektor<br>
  - Beginnt im Ursprung und berührt die Gerade in einem Punkt
- $\vec{u}$: Richtungsvektor
  - liegt auf der Gerade, Richtung ist egal

![](./assets/gerade_in_vektoren.jpg)

Hier ein Beispiel für einen Vektor der eine Gerade bestimmt: $g: \vec{x} =  \begin{bmatrix} 1 \\ -3 \end{bmatrix} + t * \begin{bmatrix}2 \\ 2\end{bmatrix}$

## gegenseitige Lage von Geraden
1. parallel
    - sie haben keinen Schnittpunkt
    - Richtungsvektoren sind parallel zueinander
2. identisch
3. windschief
    - haben keinen Schnittpunkt
    - weder parallel noch identisch
4. schneidend
    - besitzen genau einen Schnittpunkt